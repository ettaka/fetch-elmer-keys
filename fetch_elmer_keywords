#!/usr/bin/env python

import argparse
import os
import sys

class TextHierarchy:
    def __init__(self, key, parent=None):
        self.key = key
        self.branches = []
        self.parent = parent
        self.value = None
        self.inactive = False
        self.json_data = None
        if self.parent != None: self.generation = self.parent.generation + 1
        else: self.generation = 0

        
    def to_json(self):
        json_out = {}
        if len(self.branches) == 0: 
            return self.key
        else:
            json_out[self.key] = []
            for branch in self.branches: 
                if not branch.inactive:
                    json_out[self.key].append(branch.to_json())
        return json_out 

    def remove_inactive_branches(self):
        if len(self.branches) != 0:
            branches_new = [branch for branch in self.branches if not branch.inactive]
            self.branches = branches_new 
            for branch in self.branches:
                branch.remove_inactive_branches()

    def to_string(self):
        for branch in self.branches: branch.to_string()
        if self.value != None: print "  " * self.generation, self.value 
        else: print "  " * self.generation, self.key 
        
         
    def make_value_from_key(self):
        if '=' in self.key:
            self.value = self.key.split('=')
            for i, item in enumerate(self.value):
                self.value[i] = item.strip()
    
    def route_to_root(self, route = None):
        if route == None: route = []
        if self.parent != None:
            return self.parent.route_to_root(route) + [self.key] 
        else:
            return [self.key] 

    def to_json(self, json_out=None):
        if json_out == None: json_out = {}
        if len(self.branches) != 0:
            json_out[self.key] = []
            for branch in self.branches:
                json_out[self.key].append(branch.to_json())
        else: 
            if self.json_data == None: json_out = 'no data'
            else: json_out = self.json_data
        return json_out


    
class ElmerSIFHierarchy(TextHierarchy):
    def __init__(self, key, parent=None):
        TextHierarchy.__init__(self, key, parent)
        self.sif_value = None
        self.sif_value_list_type = None

    def convert_to_elmer_type(self):
        self.key = self.key.replace('\n', '')
        self.key = self.key.strip()
        if len(self.branches) != 0:
            for branch in self.branches:
                if 'End' in branch.key or branch.key.isspace():
                    branch.inactive = True
                branch.convert_to_elmer_type()
        self.make_value_from_key()
        self.make_sif_value()
        self.remove_inactive_branches()
        self.detect_and_mark_sif_value_lists()

    def add_json_data_deep(self):
        for branch in self.branches:
            branch.add_json_data_deep()
        self.add_json_data()
     
    def make_sif_value(self):
        types = ['string', 'integer', 'logical', 'real', 'procedure']
        for t in types:
            if self.value != None and t in self.value[1].lower():
                value = self.value[1].lower().split(t)[1].strip()
                self.sif_value = (self.value[0],t,value)

    def to_string(self):
        for branch in self.branches: branch.to_string()
        if self.sif_value != None: print "  " * self.generation, self.sif_value 
        elif self.value != None: print "  " * self.generation, self.value 
        else: print "  " * self.generation, self.key 

    def routes_to_sif_values(self, routes = []):
        for branch in self.branches:
            if branch.sif_value != None:
                routes.append(branch.route_to_root())
            branch.routes_to_sif_values(routes)
        return routes
 
    def detect_and_mark_sif_value_lists(self):
        types = {}
        types['header'] = 'header'
        types['solver'] = 'solver'
        types['simulation'] = 'simulation'
        types['component'] = 'component'
        types['body force'] = 'bodyforce'
        types['body'] = 'body'
        types['boundary condition'] = 'bc'
        types['initial condition'] = 'ic'
        types['material'] = 'material'
        types['equation'] = 'equation'
        for t in types.keys():
            if t in self.key.lower():
                self.sif_value_list_type = types[t]
                break
    
    def add_json_data(self):
        self.json_data = {}
        self.json_data['text'] = self.key
        if self.sif_value != None:
            self.json_data['value'] = self.sif_value[2]
            self.json_data['value type'] = self.sif_value[1]
            self.json_data['value key'] = self.sif_value[0]
            if self.generation == 1:
                self.json_data['value list'] = self.sif_value_list_type
            else:
                self.json_data['value list'] = self.parent.sif_value_list_type
                
def get_value_jsons_from_sif_hierarchy(hierarchy):
    data_list = []
    for branch in hierarchy.branches:
        data_list += get_value_jsons_from_sif_hierarchy(branch) 
    if hierarchy.sif_value != None:
        data_list.append(hierarchy.json_data) 
    return data_list

    
def file_lines_to_hierarchy(HierarchyClass, lines):
    hierarchy = HierarchyClass('root')
    leading_spaces = []
    for i, line in enumerate(lines):
        leading_spaces.append(len(line) - len(line.lstrip()))
        if i>0:
            if leading_spaces[-1] > leading_spaces[-2]:
                if len(hierarchy.branches) == 0:
                    print "Warning!", hierarchy.key, "failed to create branches."
                    return None
                hierarchy = hierarchy.branches[-1]
            elif leading_spaces[-1] < leading_spaces[-2]:
                hierarchy = hierarchy.parent
            if hierarchy == None:
                print "Warning! Detected a missing hierarchy!"
                return None
            hierarchy.branches.append(HierarchyClass(line, hierarchy))
    return hierarchy
     
       
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Fetch Elmerfem keywords from sif files.')
    parser.add_argument('-f', '--file-paths', nargs = '+', help='file name')
    parser.add_argument('-o', '--output-file', help='output text file name')

    file_paths = parser.parse_args().file_paths
    output_file = parser.parse_args().output_file

    if file_paths == None: 
        file_paths = []
        if not sys.stdin.isatty():
            for line in sys.stdin:
                file_paths.append(line.replace('\n',''))

    data_set=[]
    for file_path in file_paths:
        print "Processing input file path", file_path
        file_name, file_extension = os.path.splitext(file_path)
        if file_extension != '.sif': continue
        elif not os.path.isfile(file_path): 
            print "Warning! '" + file_path + "' was not found!"
            continue
        with open(file_path) as f:
            lines = f.readlines()
        lines = filter(lambda a: a != '\n', lines)
        hierarchy = file_lines_to_hierarchy(ElmerSIFHierarchy, lines)
        if hierarchy != None:
            hierarchy.convert_to_elmer_type()
            hierarchy.add_json_data_deep()

            h_json = hierarchy.to_json()
            data_list = get_value_jsons_from_sif_hierarchy(hierarchy)

            for item in data_list:
                if item['value list'] == None:
                    print "Warning! No value list for item", item['text']
                    continue
                line_out_bgn = item['value list'] + ":" + item['value type'] + ":" 
                space_between_key_and_type = 21 - len(line_out_bgn)
                data_set.append(line_out_bgn + space_between_key_and_type * " " + "'" + item['value key'] + "'")

    data_set = list(set(data_set))

    if len(data_set) > 0:
        if output_file == None: 
            for item in data_set:
                print item
        else:
            f = open(output_file, 'w')
            for item in data_set:
                f.write(item + '\n')
            f.close
    else:
        print "Empty key set."

        

